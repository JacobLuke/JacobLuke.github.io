<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jacob's Blograhams</title><link href="http://jabrahams.ca/" rel="alternate"></link><link href="http://jabrahams.ca/feeds%5Call-en.atom.xml" rel="self"></link><id>http://jabrahams.ca/</id><updated>2014-05-27T00:00:00Z</updated><entry><title>Pretty-boy Python</title><link href="http://jabrahams.ca/pretty-boy-python.html" rel="alternate"></link><updated>2014-05-27T00:00:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-05-27:pretty-boy-python.html</id><summary type="html">&lt;p&gt;I don't think I have a relationship with anything in the realm of software engineering so vitriolic and amorous and unstable as my love-hate feud with Python. I have a strong distaste for Java tempered by respect for design choices. I have a wary friendship with C++, using it when I can but always keeping my eye on it, never trusting it to do the right thing when I'm not watching. I begrudgingly use Javascript when I have little other choice, its &lt;em&gt;lingua franca&lt;/em&gt; status forming a teleological argument against the divine.&lt;/p&gt;
&lt;p&gt;But Python? Python's different.&lt;/p&gt;
&lt;p&gt;It's my best frenemy. I use it for so much: personal projects, &lt;a href="pelican.html"&gt;this blog&lt;/a&gt;, and even instead of a calculator more often than not. It's the first thing at my fingers for prototyping and simple calculations, and I would doubtlessly waste endless hours without it.&lt;/p&gt;
&lt;p&gt;And Python is &lt;em&gt;wrong&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sure, whitespace indentation is nice...if you're looking at it. But what if you're blind? Suddenly, you have to be Rainman to figure out scope, keeping track of whether your screenreader said "space" 6 times, 8 times, or 22, and when the last time it said that number was. Even if you can see, it can be a total pain to track down a SyntaxError caused by an unmatched dedent you can't find &lt;em&gt;because of course it's invisible&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Okay, fine, so maybe you can make do, decide on a team standard for a prime number of spaces per indent to make it easy to keep track of where your scope begins and ends. Then you're programming along, creating &lt;code&gt;Foo&lt;/code&gt;s and &lt;code&gt;Bar&lt;/code&gt;s and passing them along to God-knows-what functions and methods. Then suddenly you get an &lt;code&gt;AttributeError&lt;/code&gt; in some obscure code path with an inexplicable message like &lt;code&gt;object of type Foo has no attribute intValue&lt;/code&gt; and you're wondering how it happened, since that doesn't even &lt;em&gt;follow&lt;/em&gt; your naming convention (let alone Python's), then you reconsider your usage that doesn't allow or encourage type-checking. (I think everyone goes through this moment at least once in their Python career.)&lt;/p&gt;
&lt;p&gt;Don't get me wrong, duck-typing is great when you want to pass things along that have the same interface but aren't strict subclasses. As the canonical example goes, if it &lt;code&gt;quack&lt;/code&gt;s like a duck and &lt;code&gt;walk&lt;/code&gt;s like a duck, then it's a duck. But then suddenly you get an object that refuses to &lt;code&gt;walk&lt;/code&gt; unless you call &lt;code&gt;caffeinate&lt;/code&gt; first, and for whom &lt;code&gt;quack&lt;/code&gt; isn't even a function but a collection of works by Kerouac, and you realize rapidly that a language that lets a program pass a confused philosophy undergraduate where a duck is expected is not necessarily designed for stability and robustness.&lt;/p&gt;
&lt;p&gt;So you stop coding functions and start making classes, because by golly Python's class syntax is clear and concise. You define your &lt;code&gt;__init__&lt;/code&gt; to construct your &lt;code&gt;Thingamajig&lt;/code&gt;s, and, when you decide you need more control over allocation, you also define your &lt;code&gt;__new__&lt;/code&gt;, because why not have two separate constructors? Then you realize that your &lt;code&gt;Thingamajig&lt;/code&gt;s are actually &lt;code&gt;instance&lt;/code&gt;s because this is Python 2 and you forgot to subclass &lt;code&gt;object&lt;/code&gt;, and &lt;em&gt;of course you wouldn't want objects to be created from classes&lt;/em&gt;. You define your &lt;code&gt;__str__&lt;/code&gt; for when you want to print &lt;code&gt;Thingamajigs&lt;/code&gt; to the console, and your &lt;code&gt;__repr__&lt;/code&gt; for...um...when you want to pass it to &lt;code&gt;eval&lt;/code&gt;? Then you want &lt;code&gt;Thingamajig&lt;/code&gt;s to have pointer-like behaviour in &lt;code&gt;if&lt;/code&gt; statements, so you define &lt;code&gt;__bool__&lt;/code&gt;. But that doesn't work (except when you use a 3.x interpreter) and your objects are always True, so you look into the docs and realize you have to define &lt;code&gt;__nonzero__&lt;/code&gt;, because consistent naming conventions &lt;em&gt;are apparently not a thing in Python&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Once you've got your thingamajigs, you can manipulate the base class as you please, since it's just a special instance of a &lt;code&gt;type&lt;/code&gt; object. This might sound familiar if you've spent extensive time programming with Javascript's prototype-based model, in which case dollar signs likely bring to mind not hordes and hordes of money but nightmares of clumpy, irregular, unstable frameworks making a bad problem worse in unpredictable and subtle ways. You probably feel right at home here, actually.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(THIS IS NOT FINISHED)&lt;/strong&gt;&lt;/p&gt;</summary><category term="nerdish"></category><category term="programming"></category></entry><entry><title>Duty of Care</title><link href="http://jabrahams.ca/respect-2.html" rel="alternate"></link><updated>2014-05-26T00:00:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-05-26:respect-2.html</id><summary type="html">&lt;p&gt;&lt;em&gt;(Part 2 of 3 in Part 2 of 2. Previous posts &lt;a href="pride.html"&gt;here&lt;/a&gt; and &lt;a href="respect-1.html"&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'll admit I'm self-reliant to a fault. Take, for example, the earlier two parts of this series. The first was all about relying on your self-image to find purpose, basing your strength in your own identity. The second was about doing justice to your own experiences, allowing you to draw power from your own deserved characteristics. &lt;/p&gt;
&lt;p&gt;It sounds great in theory, but I've found (on multiple occasions) that independence and self-isolation go hand in hand, making me less likely to reach out in times of need. Starting this blog, admittedly, was an attempt to break from that: my &lt;a href="failsafes.html"&gt;first real article&lt;/a&gt; is kind of transparent in hindsight about its true intentions. I kind of wish I'd kept that spirit up, but sometimes old habits are easier. It's often simplest to think you're the only thing riding on your decisions, pruning goals down to a clear objective and reducing the weight of success and failure.&lt;/p&gt;
&lt;p&gt;But it's never true.&lt;/p&gt;
&lt;p&gt;Just like you owe your own life experiences due diligence, you have a duty to those who care for you to thrive and succeed. They've invested what they could, and they all deserve the dividends you can provide. &lt;/p&gt;
&lt;p&gt;I don't mean to say that others should live your life for you, or make your choices on your behalf, or ever push you to do something you don't think you should. Hell no. Make your own damn life, it's the only one you'll get. &lt;/p&gt;
&lt;p&gt;At the same time, though, remember all the people who've taken stake in you. Every person who's said, "That guy. I think he'll do okay, and I'll help make sure." Every person who stood by you, with you, or for you. Every person who cleaned your wounds, visible or not. Every person who put their faith in you at a time where nothing mattered more. You owe them something. Not money, not children, not the blood of your enemies. You don't even owe them success, fame, or fortune. You just owe them one thing: when everything gets rough, you hold on just a little longer. You stand just a few seconds more when the storm hits, keep the levees together for just a few more moments for the brick and mortar they gave you to build them. &lt;/p&gt;
&lt;p&gt;And maybe, just maybe, they make the difference, and you keep running when you should have stumbled and fell. When you have no right to survival, you thrive. When you couldn't possibly imagine going on another week, another day, another &lt;em&gt;hour&lt;/em&gt;, you do.&lt;/p&gt;
&lt;p&gt;And you never forget why.&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Postscript&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'd originally intended for this article to focus on empathy, all those months ago when I conceived it. The main message was the same, of course, but the delivery was &lt;em&gt;totally&lt;/em&gt; different. It was mostly about pain transference, about the multiplier you'd apply to your own suffering to pass it off to someone else. It was something that often went through my head at my darker moments, for reasons that are left as an exercise to the reader. &lt;/p&gt;
&lt;p&gt;It helped a &lt;em&gt;lot&lt;/em&gt; (more than any other CBT-like thought process has in ages), but I realized something when writing the first draft of this article: it was very &lt;em&gt;me&lt;/em&gt;. It's not like it could &lt;em&gt;never&lt;/em&gt; help someone else, (hell, none of my experiences are wholly unique) but it certainly limited my scope immensely. So I retooled. And retooled. And retooled. And eventually wrote an article that you probably just read. It's different, but it gets the same message across (more or less) without losing the effect (I hope) or being inaccessible to people who haven't been in a state like I was.&lt;/p&gt;</summary><category term="heavy"></category><category term="mental health"></category></entry><entry><title>My Dinner with Java</title><link href="http://jabrahams.ca/my-dinner-with-java.html" rel="alternate"></link><updated>2014-04-11T00:00:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-04-11:my-dinner-with-java.html</id><summary type="html">&lt;p&gt;I was chatting online with some friends from school, when the topic of programming came up. This wasn't much of a surprise, since we all do this for a living, but it did lead to a discussion on Java. I've made my stance on Java &lt;a href="/java.html"&gt;pretty clear&lt;/a&gt;, but &lt;a href="http://www.gurjantkalsi.com/"&gt;Kalsi&lt;/a&gt; made an interesting point on  the topic:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don't even think Java is a bad language. It's like a spoon: you can pretty much use a spoon as any other utensil. And people do. And it makes me mad. But I'm not mad at the people who make spoons [...] nor do I think spoons are shitty utensils.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We then went off on a tangent to apply this to pretty much everything else we could think of, and I figured I'd share the fruits of our labour in this article. Some of what follows originates from Kalsi, some from my part of that discussion, and some just flowed out while I was writing this article.&lt;/p&gt;
&lt;p&gt;(I've excluded an entry on Ruby on Rails for now, since it's off-topic.)&lt;/p&gt;
&lt;h2&gt;.NET&lt;/h2&gt;
&lt;p&gt;You don't actually have any utensils. Your weird roommate, however, has a drawer full of silverware, which he gives to you whenever you ask. Honestly, it's pretty nice stuff, but you have no ownership over it, and your roommate's pretty picky about always putting it back when you're done with it. He's also kind of odd about his drawer, and you're never sure that you aren't going to wake up someday and find half of the drawer missing, or all of the spoons replaced with shovels, or all of the knives suddenly double-ended.&lt;/p&gt;
&lt;p&gt;Maybe you should just move out.&lt;/p&gt;
&lt;h2&gt;Assembly&lt;/h2&gt;
&lt;p&gt;You're eating with a revolver instead of a spoon. "It's faster," you claim to your incredulous colleagues, but really you just get off on the thrill of nearly scattering your brainmass on the wall every time you eat soup. You're always concentrating so hard on your keeping a steady but light grip that you hardly notice if you're eating pasta or your pet gila moster, Hernandez, who admittedly had it coming, since he should have figured out to stay away from you &lt;em&gt;like everyone else&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;C&lt;/h2&gt;
&lt;p&gt;Instead of forks and knives, you bought a surplus of wood blocks and a whittling knife. The first time you made soup, you ended up with a mouthful of splinters and an empty stomach. However, you're definitely learning, and it's been &lt;em&gt;hours&lt;/em&gt; since the last time you got a splinter from one of your homemade utensils. You've gotten good at whittling, and you kind of have to, unless you want to accidentally carve a hole in the side of your face.&lt;/p&gt;
&lt;h2&gt;C++&lt;/h2&gt;
&lt;p&gt;You've got a hunting knife and a carving fork. About as good for prison fights as steak dinners, you know to use other tools in circumstances befitting them (or at least you do since the accident). The whittling knife still sits in the corner, but you haven't touched it in months, and you're kind of glad for that since the nightmares haven't subsided yet. The fork and knife also came with a darkened box that supposedly contains a single spoon, but every time you eat something new you get a funny feeling that it's a &lt;em&gt;different spoon&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Javascript&lt;/h2&gt;
&lt;p&gt;Instead of a fork or spoon, you get some vague "Utensil" that looks like it came from one of the other boxes, yet claims to be all-purpose. Every time you change your Utensil in any way, you change &lt;em&gt;every other Utensil in existence&lt;/em&gt;. This wouldn't be so bad, but other people aren't as good at taking care of and cleaning their Utensils, so yours gets grungy and bogged down at unpredictable (but incessant) intervals. Some guy came along one day and decided to "upgrade your Utensil," but really he just added a bunch of unnecessary and poorly-designed features on what was supposed to be a simple way to eat soup. You can't even &lt;em&gt;drink&lt;/em&gt; things reliably now, since it's been modded to act like a straw. Still, it's the most convenient solution available, so you grumble along until the day it inevitably develops sentience and decides to murder you.&lt;/p&gt;
&lt;h2&gt;PHP&lt;/h2&gt;
&lt;p&gt;PHP is eating with your hands. You'll get the job done (most of the time), but you're going to make a mess.&lt;/p&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;Python is a glass fork. Yes, it's pretty. Yes, it's fairly versatile, you can use it for anything you want and it will probably be okay, but it won't be &lt;em&gt;fast&lt;/em&gt;, because the faster it's used the more likely it is to splinter and crack. Sure, it will continue to look pretty, but that will become less and less important as it cuts more tiny holes into your mouth and digestive tract. It also &lt;em&gt;really&lt;/em&gt; shouldn't be used for something big, since that's just asking for it to immediately shiv you in the lips.&lt;/p&gt;
&lt;h2&gt;Scala&lt;/h2&gt;
&lt;p&gt;A box comes in the mail with a spoon and a 3D-Printer. At first you use the spoon, because it's what you're used to and the printer keeps making funny noises. Over time, though, you learn to print a fork and a knife, then different-sized variants for different foods. Then chopsticks and electric carving knives. At some point you start making utensils that look like nothing the world has seen before, things you couldn't put into words if you tried. After days, you produce an object that resembles a fork at first glance but, when held at 72 degrees to the ground, launches its contents toward the nearest wall at Mach 3.&lt;/p&gt;
&lt;p&gt;(This may be in progress, if it ever updates again. If not, it's not)&lt;/p&gt;
&lt;p&gt;-J&lt;/p&gt;</summary><category term="nerdish"></category><category term="programming"></category></entry><entry><title>Siblings</title><link href="http://jabrahams.ca/siblings.html" rel="alternate"></link><updated>2014-04-10T00:00:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-04-10:siblings.html</id><summary type="html">&lt;p&gt;I write this on National Siblings' Day, not because I planned to, but because I couldn't &lt;em&gt;not&lt;/em&gt;. My three siblings are everything to me, and I feel like it's the least I can do to dedicate a blog post to them. I know for a fact that, were it not for them, I wouldn't be where I am today.&lt;/p&gt;
&lt;h2&gt;Leila&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Leila" src="leila.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Leila, I know you're only two. I know I haven't been around for much of your life, and I know there are times you've forgotten I exist. These are just realities when your brother needs to work and go to school, and doesn't like to do either of those close to home.&lt;/p&gt;
&lt;p&gt;But it doesn't matter. By the second week I was home, you had conscripted me as your Walking Assistant, there to hold your hand as you walked up and down the hall, even though you didn't really need it. You treated me like family barely knowing who I was. You started saying "Hey" to me every time you saw me. And shortly after I left again, you learned my name. You reminded me that good changes still happen in the world at a time when I'd (understandably) pushed that idea aside. &lt;/p&gt;
&lt;p&gt;You may grow up (and you do seem to do so rather fast), but to me you'll always be that little girl with an impossibly big heart.&lt;/p&gt;
&lt;h2&gt;Noah&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Noah" src="noah.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;When I first saw you in the hospital, I honestly thought you looked more like an alien than a little boy, cute though you were. Before one month had passed, though, I knew I would give anything to keep that little space creature safe from harm, no matter what.&lt;/p&gt;
&lt;p&gt;I stood by your side as you grew from that little helpless blob to a little boy. I kept an eye on you all those days as your mom ran the daycare. I listened to your Noahspeak when others were too busy to. I held you on my shoulders for endless blocks, I walked and ran beside you as you went, and I always tried to be there to catch you when you fell.&lt;/p&gt;
&lt;p&gt;Who would have thought you'd ever need to be there to catch me?&lt;/p&gt;
&lt;p&gt;When you saw me that first morning I was back, you ran up to me and gave me a big strong hug. It was then, with your tiny arms embracing me, that I started to see that someday, maybe not for a while but definitely eventually, everything would be alright again. You showed wisdom and kindness not usually attributed to a 5 year-old, understanding what had happened much more deeply than it had been explained to you. You stood by my side as I had always stood by yours, and kept everyone entertained in your usual way, dancing and singing to lighten spirits when it seemed most grim. I hope I never have to be there for you the way you were for me, and nothing of the same calibre happens to you, but I will always be your brother, and your friend.&lt;/p&gt;
&lt;h2&gt;Emily&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Emily" src="emily_and_me.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Emily, you've been with me my whole life. I know we used to fight a lot as kids, and then as teens, but, when push came to shove, we'd always have each other's backs. I always knew that you'd be the one person I could count on in my corner no matter what, and you'd always be there for advice, someone to talk to, or someone to lean on when I needed it most. And I wasn't wrong.&lt;/p&gt;
&lt;p&gt;When I had nowhere else to turn, you gave me your &lt;em&gt;apartment&lt;/em&gt; for over a month. You took time out of your extremely busy workday to help me make appointments and organize logistics. You helped me stand when I couldn't, and stayed by my side when I could, just in case I stumbled. You kept me moving, kept me steady, and kept me alive. I'm so lucky to have you for a sister, and I'll never forget what you've done for me. You reminded me why I looked up to you for those years, why I still do, and why I will always be proud to call myself your brother.&lt;/p&gt;
&lt;h2&gt;Coda&lt;/h2&gt;
&lt;p&gt;I know only one of the three of you reads this blog (and, in truth, only two of you can read). I don't know if you will all even ever read these words, and I don't know if I intend for you to, honestly. I just hope I can remind you, and anyone else who reads this, what a true sibling is, because that's what you all are to me. Without the support of the three of you, I wouldn't have weathered the storm the way I did. Without Emily's steady stream of support, Noah's anchoring bonds, and Leila's ever-expanding personality, I wouldn't be who I am today. Thank you all.&lt;/p&gt;
&lt;p&gt;Now go hug your siblings&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;</summary><category term="Noah"></category><category term="Emily"></category><category term="Leila"></category><category term="family"></category></entry><entry><title>C++ - Template Hell</title><link href="http://jabrahams.ca/cpp-templates.html" rel="alternate"></link><updated>2014-03-31T00:00:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-03-31:cpp-templates.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Part II in a &lt;a href="cpp-casts.html"&gt;series&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let's talk about generic programming.&lt;/p&gt;
&lt;p&gt;In normal, static-type programming, you say things like, "I know &lt;code&gt;foo&lt;/code&gt; is an &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;bar&lt;/code&gt; is a &lt;code&gt;B&lt;/code&gt;, so I know what type I'll get when I write &lt;code&gt;foo + bar&lt;/code&gt;." This is pretty efficient: you know what type everything will be, the compiler does too, and if you're wrong there's a clear and efficient way of telling you so. (ie. The compiler can just go and say, "type &lt;code&gt;A&lt;/code&gt; is not type &lt;code&gt;Q&lt;/code&gt;," and that will be that.)&lt;/p&gt;
&lt;p&gt;However, suppose you want to say, "I know (or believe) &lt;code&gt;foo&lt;/code&gt; has some member &lt;code&gt;baz&lt;/code&gt;, and &lt;code&gt;bar&lt;/code&gt; has some members &lt;code&gt;twiddle&lt;/code&gt; and &lt;code&gt;fiddle&lt;/code&gt;, but I don't know or care what type they actually are. Let me write a function that takes &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; and does something useful." In languages like C, you can...write something else, because C doesn't let you do anything about it. &lt;code&gt;A&lt;/code&gt; is &lt;code&gt;A&lt;/code&gt;, and nothing else is &lt;code&gt;A&lt;/code&gt;, no matter how much it dreams of being &lt;code&gt;A&lt;/code&gt; at night. (Unless you do some crazy type-punning. Don't do that). In other, more developed OO languages, you have (up to) three solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interface-based programming, or thinking far-enough ahead and giving your objects a relevant base type to do what you want them to. This is nice when possible, but may have problems when you can't modify the interface after-the-fact. (In these cases the &lt;a href="http://en.wikipedia.org/wiki/Adapter_pattern"&gt;Adapter design pattern&lt;/a&gt; may help.) Languages with interfaces also often have some kind of generics to apply the concept to containers and the like.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Duck-typing. This basically says, "Screw type-safety, figure it out when you try to run the code. If &lt;code&gt;foo&lt;/code&gt; doesn't have a &lt;code&gt;baz&lt;/code&gt;, deal with it." This is extremely common in scripting languages, and the source of endless headaches and bugs that I won't go into here. (I have to save &lt;em&gt;something&lt;/em&gt; for my Python rant.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Templates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Templates are a solution to generic programming the same way a hammer is a solution to a Rubik's Cube. Take the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Some_Return_Type&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Some_Input_Type&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blargle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With some clever definitions, we can actually make this compile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;TIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;TRet&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;TRet&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TIn&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blargle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can do even better in C++11:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;decltype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blargle&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blargle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And even better in C++14:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blargle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks kind of like duck-typing, right? Sure...if duck-typing generated more code every time you called the function with a different set of types. Further, the header-source model of C++ becomes &lt;em&gt;impossible&lt;/em&gt; with templates, since the compiler needs the definition (and not just the declaration) to see if it will compile or not. But, you know what? None of this is that bad. You could argue this is actually a good way of doing things and, on a good day, I might agree with you. No, let's go where it actually gets fucked up.&lt;/p&gt;
&lt;h2&gt;Numerical Templates&lt;/h2&gt;
&lt;p&gt;If you're a Java guy or girl (and I know you are), you're probably going, "Oh neat, templates are just like generics with less obvious error messages." And that means you've never seen templates on anything else, like, say, numbers.&lt;/p&gt;
&lt;p&gt;Please pick up your jaw. It doesn't belong on the floor.&lt;/p&gt;
&lt;p&gt;Sure, instead of &lt;code&gt;typename&lt;/code&gt;, you can put &lt;code&gt;size_t&lt;/code&gt; or &lt;code&gt;bool&lt;/code&gt; or even &lt;code&gt;MyMessedUpEnumType&lt;/code&gt; inside the angle brackets. Ostensibly for fixed-size arrays (or something?), numerical templates have a not-so-nice unintended feature: template metaprogramming. As in, you can write programs inside template declarations. Neat, sure, but unclear as &lt;em&gt;hell&lt;/em&gt;. For instance, here's a way of computing factorials of compile-time constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;struct&lt;/span&gt; &lt;span class="nx"&gt;Fact&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;Fact&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;N&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Fact&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;size_t&lt;/span&gt; &lt;span class="nx"&gt;Fact&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put &lt;code&gt;Fact&amp;lt;5&amp;gt;&lt;/code&gt; in your program, and it'll just be replaced by 120 seamlessly. Put &lt;code&gt;Fact&amp;lt;7000&amp;gt;&lt;/code&gt; and, well, it might compile. Eventually. (GCC does not compile, it just grumbles about "maximum template depths" and mutters curses from the Old World under its breath.)&lt;/p&gt;
&lt;p&gt;The great thing about numerical templates is that they play some part in making compiler errors &lt;em&gt;completely unreadable&lt;/em&gt;. The compiler doesn't know you. It can't assume you won't template on an enumeration. It doesn't know your life and what you've been through. GCC can't afford to take you out to dinner and learn your favourite band. Hell, you might've even &lt;em&gt;wanted&lt;/em&gt; the template not to compile...&lt;/p&gt;
&lt;h2&gt;SFINAE and type-traits&lt;/h2&gt;
&lt;p&gt;C++ has this neat (read: horrifying) idiom called, "Substitution Failure is not an Error," or SFINAE for short. It basically says to the compiler, "I've defined this template in 2 (or more) ways. Figure out which one I mean." While (ostensibly) included for good reasons (for instance, you might want to handle pointer-types and value-types differently), it's usually used in ways that fit more into dynamically typed languages: determining attributes of types after-the-fact. Which, y'know, &lt;em&gt;defeats the original purpose of templates&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But you know what? Compile-time duck-typing isn't the worst solution. It's strictly better than &lt;em&gt;runtime&lt;/em&gt; duck-typing, even if you have to know medieval Cyrillic to understand why the compiler thinks you're wrong when you are. It's also more flexible (&lt;em&gt;twitch&lt;/em&gt;) than Java-style generics in a lot of ways. Lastly, you have to remember who you're dealing with: C++ developers will run wild with &lt;em&gt;whatever feature you give them&lt;/em&gt;. A way to make the compiler Turing-complete? That's a small price to pay.&lt;/p&gt;
&lt;p&gt;And at least you aren't paying at runtime.&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;</summary><category term="tech"></category><category term="c++"></category><category term="nerdish"></category></entry><entry><title>Self-Respect and Actualization</title><link href="http://jabrahams.ca/respect-1.html" rel="alternate"></link><updated>2014-03-24T00:00:00Z</updated><author><name>JacobAbrahams</name></author><id>tag:jabrahams.ca,2014-03-24:respect-1.html</id><summary type="html">&lt;p&gt;(Note: this post was delayed for a few reasons, not the least of which was a desperately needed rewrite.)&lt;/p&gt;
&lt;p&gt;For those keeping track at home, this is Part 2 of the series I started &lt;a href="/pride.html"&gt;here&lt;/a&gt;. In its way, it's also Part 1 (of 3, I think) of a subseries inside the series based on a common theme. Yes, this is confusing, and yes, this adds up to 4 instead of 3 (as previously stated). If you look at the revision history on Github, the page actually said 4 for a while, which I changed once when planning things and won't change back because &lt;em&gt;stop telling me what to do&lt;/em&gt;. Now if you don't mind, let's get to the actual content...&lt;/p&gt;
&lt;p&gt;I'd originally planned for this article to focus on respect, which is a pretty amorphous and vague term in a lot of ways. Respect for whom? How are you showing it? To what extent? Most importantly, &lt;em&gt;why&lt;/em&gt; are you showing respect? If you combine all the possible combinations of answers, you get...well, way more topics than I have energy to write about. Knowing my SQL, I decided to &lt;code&gt;GROUP BY target&lt;/code&gt;, because it flows nicely. (I'm aware you wouldn't put this information into a database. Stop nitpicking.)&lt;/p&gt;
&lt;h2&gt;You&lt;/h2&gt;
&lt;p&gt;We'll start off with the person you know best: you. Without exception, you're the person you spend the most time with. You've also known you since before kindergarten, you've grown up with you, you've seen you naked, and (barring unforseen circumstances) you'll grow old with you. If you have to put up with you all this time, why not at least pay you &lt;em&gt;some&lt;/em&gt; respect? I'll explain how:&lt;/p&gt;
&lt;p&gt;There is a person you deserve to be.&lt;/p&gt;
&lt;p&gt;Don't think for a second that I mean you're entitled to higher pay (though you might be), or to win the lottery (though you might), or to violate physical laws (you won't). I mean, every person is a collection of values, experiences, and brain chemistry that make up what they are. These reflect in our personality and actions, which in turn affect all of them in this beautiful feedback loop.&lt;/p&gt;
&lt;p&gt;And there's no reason not to make the person you deserve better.&lt;/p&gt;
&lt;p&gt;A month ago or so, I was wondering how I was still standing. I could let circumstances take over. I could yield to my condition. I could put up all my old walls and shells and seal everything away. There were so many ways I could put things together and come out with a wrong result.&lt;/p&gt;
&lt;p&gt;But I didn't. I kept moving, because despite it all I'd &lt;em&gt;earned&lt;/em&gt; the characteristics I'd needed to keep going. I'd earned the strength to go on from putting up with everything for so many years. I'd earned the tricks and hotfixes I use with the years I'd invested in developing them. I'd earned the emotional openness by making it through the most emotionally raw period in my life more-or-less intact. And I couldn't throw that effort, that investment, that &lt;em&gt;self-dedication&lt;/em&gt;, away. Because I &lt;em&gt;deserve&lt;/em&gt; to be someone who got through it all. I have to keep trying to &lt;a href="http://tvtropes.org/pmwiki/pmwiki.php/Main/EarnYourHappyEnding"&gt;earn my happy ending&lt;/a&gt;, not because I'm an optimist, not because I have any reason to believe everything will be alright, but because it's what I deserve to do.&lt;/p&gt;
&lt;p&gt;And you know what? It's what you deserve too.&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There's a life out there&lt;/p&gt;
&lt;p&gt;And it's gonna be mine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;-- &lt;cite&gt;Train&lt;/cite&gt; (3 Doors Down)&lt;/p&gt;</summary><category term="mental health"></category><category term="heavy"></category></entry><entry><title>Cast operators in C++</title><link href="http://jabrahams.ca/cpp-casts.html" rel="alternate"></link><updated>2014-03-17T12:00:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-03-17:cpp-casts.html</id><summary type="html">&lt;p&gt;Alright, I'm done bitching about Java. The maelstrom from my last post was exhausting (on both sides of the issue), and I don't have enough energy to deal with that every single week. Plus, I'm basically out of content on Java (more or less). Originally, that meant that I would spend this week on Python. However, I saw that as kicking another anthill altogether, so I'm pushing that one back at least a week.&lt;/p&gt;
&lt;p&gt;Instead, let's talk about C++.&lt;/p&gt;
&lt;p&gt;As you may have noticed, the title of this article is &lt;em&gt;somewhat&lt;/em&gt; narrow in scope. That's mostly because I couldn't compress my C++ critique to a single article, and slightly to abuse the good faith of my current readerbase in a desperate bid to draw out whatever lifespan this blog has to the last possible second. It's also because I work with C++ fairly rarely, so writing these articles requires drawing out stale vitrol from the dank recesses of my mind, which takes time to cultivate into proper rage. Plus, my relationship with C++ is so much less hateful: I have on multiple occasions &lt;em&gt;actively chosen&lt;/em&gt; to use C++ for tasks. So this will be the first of (let's say) 3 articles. (This number will not update with the number of articles I write. It will just become wrong.)&lt;/p&gt;
&lt;h2&gt;Brief History&lt;/h2&gt;
&lt;p&gt;I'm assuming my audience is mostly made up of classmates or colleagues, but it doesn't hurt to go over how C++ came to be. Around the early 70s, Dennis Ritchie was building Unix at Bell Labs, when he decided he needed a language that was more portable, more readable, and less error-prone than assembly code. He built C instead, and the programmers of the 70s took to it like the other young adults of the 70s took to recreational drug use. By the 80s, Bjarne Stroustrup saw the drug addiction-like damage C was doing to people, and decided that the fix of the problem would be to &lt;em&gt;add more features&lt;/em&gt;, which is eerily similar to heroin's early history. He spearheaded efforts to build a new language, which he dubbed, "C with Classes, Exceptions, Metaprogramming, Generics, Algorithms, and everything else I could think of." This was shortened to "C with Classes," which was later shortened to "C++" because languages with long names are rarely successful. [citation needed] &lt;/p&gt;
&lt;p&gt;(Side note: because of post-increment semantics, Bjarne made a language that was the same as what C &lt;em&gt;used&lt;/em&gt; to be, and changed C in the process. The C++-influenced changes in C since the 80s attest to this.)&lt;/p&gt;
&lt;h2&gt;Cast Operators&lt;/h2&gt;
&lt;p&gt;Suppose you have two types, &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt;, and an instance of each, &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; respectively. In C, converting a &lt;code&gt;T&lt;/code&gt; to a &lt;code&gt;V&lt;/code&gt; is easy: just write &lt;code&gt;v = (V)t&lt;/code&gt; and it'll probably do something that makes sense. (To elaborate, it will either make a logical conversion if &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; are both numerical types, and it will just reinterpret the value at that point in memory without changing it otherwise. Or it will crash in an implementation-defined way if you're being an idiot, and you deserve that.)&lt;/p&gt;
&lt;p&gt;C++ decided that C's handling of the situation was, like the rest of the language, insufficient, and went about fixing it in an extremely questionable way, just like they did with the rest of the language. They noted a few problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Casts are too easy to hide in code. If you're looking for places where &lt;code&gt;T&lt;/code&gt;s are casted to &lt;code&gt;V&lt;/code&gt;s, what string are you going to search the code for? &lt;code&gt;(V)&lt;/code&gt;? Good luck with that.&lt;/li&gt;
&lt;li&gt;Casts don't show any intent. What if you thought that &lt;code&gt;T&lt;/code&gt;s have a logical interpretation as &lt;code&gt;V&lt;/code&gt;s, but in fact your code just ends up manipulating parts of &lt;code&gt;V&lt;/code&gt;s that you really shouldn't be touching? To the C compiler, you could &lt;em&gt;want&lt;/em&gt; to access parts of &lt;code&gt;V&lt;/code&gt; like that, because that's also something C-programmers do, and it has no reason to assume you're a sensible human being.&lt;/li&gt;
&lt;li&gt;Casts aren't user-definable. Well, they kind of are, if you assume that your &lt;code&gt;struct&lt;/code&gt;s are always packed in the same way across different architectures and operating systems. (See above for why the compiler doesn't assume you aren't doing this.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To fix these perceived problems, C++ did a bunch of things. First and foremost, they created four cast operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static_cast&lt;/code&gt; - you &lt;em&gt;know&lt;/em&gt; that &lt;code&gt;t&lt;/code&gt; can be thought of as a &lt;code&gt;V&lt;/code&gt;, or you're willing to pay some pretty hefty consequences if you're wrong.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dynamic_cast&lt;/code&gt; - &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; are pointer/reference-types, and &lt;code&gt;T&lt;/code&gt; is a base type of &lt;code&gt;V&lt;/code&gt;. You're pretty sure &lt;code&gt;t&lt;/code&gt; is actually a &lt;code&gt;V&lt;/code&gt;, but you don't want your program to explode if you're wrong, so you're okay if an exception (specifically &lt;code&gt;std::bad_cast&lt;/code&gt;) is thrown when your assumption turns out to be false. (If everything is pointers, &lt;code&gt;NULL&lt;/code&gt;/&lt;code&gt;nullptr&lt;/code&gt; is returned instead.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reinterpret_cast&lt;/code&gt; - you know that &lt;code&gt;t&lt;/code&gt; isn't a &lt;code&gt;V&lt;/code&gt;, but you think that the binary data in a &lt;code&gt;T&lt;/code&gt; makes sense interpreted as a &lt;code&gt;V&lt;/code&gt;, so you want the compiler to just look the other way for a second or two.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const_cast&lt;/code&gt; - You know that &lt;code&gt;T&lt;/code&gt;s say they shouldn't be modified, but you have reason to believe that it's okay to do so (assuming that &lt;code&gt;T&lt;/code&gt; is a &lt;code&gt;const V&lt;/code&gt;). You can also cast away volatility, but I don't really know why you would.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Boost is also trying to add &lt;code&gt;lexical_cast&lt;/code&gt; to the group, which would act like &lt;code&gt;[tT]oString&lt;/code&gt; in Java/C# but in a bidirectional way, which is kind of neat.)&lt;/p&gt;
&lt;p&gt;If you didn't catch my tone, &lt;em&gt;most of these casts are almost always wrong&lt;/em&gt;. Let's go through them again:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; is fine, generally speaking. Nice and greppable, clearly shows intent, and is comparable in speed to a C-cast.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dynamic&lt;/code&gt; shows too much doubt on the part of the programmer: why do you only &lt;em&gt;think&lt;/em&gt; &lt;code&gt;t&lt;/code&gt; is a &lt;code&gt;V&lt;/code&gt;? Where is this object coming from if you can't accurately describe its type &lt;em&gt;but you still need to know what it is&lt;/em&gt;? Most importantly, &lt;em&gt;why are you ever downcasting&lt;/em&gt;? (It's also really slow compared to the others.)&lt;/li&gt;
&lt;li&gt;Do I really need to explain why &lt;code&gt;reinterpret&lt;/code&gt; is bad? If &lt;code&gt;static&lt;/code&gt; won't compile, then you should step back, take a deep breath, and go back to writing assembly. A &lt;code&gt;std::pair&amp;lt;int, int&amp;gt;&lt;/code&gt; is not and will never be a &lt;code&gt;double&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; is justifiable when you're dealing with stupid APIs that give you &lt;code&gt;const&lt;/code&gt; variables that you know you can actually write to. If you're &lt;code&gt;const_cast&lt;/code&gt;ing in code entirely written by you or someone you know, you should &lt;em&gt;really&lt;/em&gt; reconsider.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For backwards-compatability, C++ includes the C-style cast operator. It's behaviour is basically to run through all these cast operators until one makes sense. This is, of course, almost never what you want, since it solves &lt;em&gt;none&lt;/em&gt; of the problems the operator had in C.&lt;/p&gt;
&lt;p&gt;Oh, and there are two other cast operator-like options provided in C++:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you can define an &lt;code&gt;operator V&lt;/code&gt; function inside &lt;code&gt;T&lt;/code&gt;'s definition. Or anywhere else, because operators can be overloaded in any scope.&lt;/li&gt;
&lt;li&gt;you can define a constructor in &lt;code&gt;V&lt;/code&gt; that takes a single argument that is implicitly convertible to a &lt;code&gt;T&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, I'm leaving something out here. See, both of these are &lt;em&gt;implicit&lt;/em&gt;, meaning you can just write &lt;code&gt;v = t;&lt;/code&gt; and it will just pick the first thing that works. Sure, you can declare either as &lt;code&gt;explicit&lt;/code&gt;, but only in C++11-onwards: &lt;code&gt;explicit&lt;/code&gt; only worked for single-argument constructors &lt;em&gt;for at least 15 years&lt;/em&gt;. This lead to ridiculous efforts to get around the language's limitation including (but not limited to) the &lt;a href="http://www.artima.com/cppsource/safebool.html"&gt;safe-bool idiom&lt;/a&gt; for pointer-like truth-value detection. (This is one of my favourite instances of an extremely complex solution to a simple problem.) Thankfully, this kind of innovation is no longer necessary, but it's still a "gotcha" to watch for, since so few other languages mark conversions as implicit by default.&lt;/p&gt;
&lt;p&gt;(I'm not even going to &lt;em&gt;begin&lt;/em&gt; on how complicated this gets with templates and determining function prototypes, because this article is long enough and I want to do templates as a separate article.)&lt;/p&gt;
&lt;p&gt;Does C++ handle this all wrong? I'm on the fence with that. Sure, languages like C# have a more structured, logical approach to casts and conversions (eg. limiting the scope, forcing an explicit/implicit declaration etc.), but C++'s design has always been about giving the programmer as many tools as possible without restricting their freedom. Really, it should be common sense not to abuse &lt;code&gt;reinterpret_cast&lt;/code&gt;, but if you're crazy enough to want to, well, C++ will hand you the keyword. It's not going to stop you from pointing the gun at your foot, but it'll help you dial 911. (Unfortunately, it won't stop you from tearing out the phone lines.) The implicit-cast-by-default thing is strange, sure, but once you're aware of it you can probably handle it. All in all, C++ lets you do what you want quickly and (if you choose to) clearly, and that's all that really matters.&lt;/p&gt;
&lt;p&gt;To sum up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ adds 4 more cast operators. 3 are usually a sign of bad programming somewhere along the line.&lt;/li&gt;
&lt;li&gt;C++ lets you define conversions, but you might be surprised when it decides to apply them.&lt;/li&gt;
&lt;li&gt;The design of casting in C++ makes sense for C++, as long as you're okay with that&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ is &lt;em&gt;huge&lt;/em&gt;. I just wrote more on one tiny part of it than I wrote on &lt;em&gt;all of Java&lt;/em&gt;. And I'm probably going to write more, given the right feedback. If that sounds like a good thing, let me know. 'Til then, I'll just continue waiting for my Java-based IDE to unfreeze.&lt;/p&gt;
&lt;p&gt;(Seriously. Not even kidding)&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;</summary><category term="nerdish"></category><category term="programming"></category><category term="c++"></category></entry><entry><title>Pride and Self-Image</title><link href="http://jabrahams.ca/pride.html" rel="alternate"></link><updated>2014-03-14T00:00:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-03-14:pride.html</id><summary type="html">&lt;p&gt;So I got an interesting response out of my last article. I'm not going to lie, it wasn't the easiest thing in the world to write, and it's kind of gratifying that it didn't fall on deaf ears. I got some great advice in exchange for the words I gave, and a lot of stories I obviously won't talk about at length. Sometimes it's nice to feel like you're not going at something alone.&lt;/p&gt;
&lt;p&gt;On the advice of my good friend &lt;a href="http://sandymaguire.me/"&gt;Sandy&lt;/a&gt;, I decided to quantify my motivators using a technique called &lt;a href="http://sandymaguire.me/goal-factoring/"&gt;goal-factoring&lt;/a&gt;. He's got an explanation there that's way better than anything I could come up with, but I'll make an attempt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start by brainstorming your day-to-day activities. Ideally, this includess any conscious action, but if you can't remember something it's probably not going to factor in too much anyway&lt;/li&gt;
&lt;li&gt;For each activity, ask yourself &lt;em&gt;why&lt;/em&gt; you do it. Sometimes this makes sense, sometimes it doesn't, but don't stop thinking about it until you come up with at least one cause. In my case, I tried to generalize causes a little at this step to make the map cleaner, but you don't have to&lt;/li&gt;
&lt;li&gt;Until you reach an obvious base level (eg. an emotion, a physical necessity), repeat with remaining roots from the previous step. You can update nodes to point to more base causes as necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;He ends up with a chart that (from low-resolution) looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Goal-factoring Chart" src="/goalfactoring.jpg" title="Goal-Factoring Chart" /&gt;&lt;/p&gt;
&lt;p&gt;After drawing up my version of the process, I realized it wouldn't make as much sense as a chart for me for 2 reasons:
  * I can't draw. LaTeX? Still won't be readable (somehow). Some other charting software? Ain't nobody got time for that.
  * Mine turns out &lt;em&gt;so damn linear&lt;/em&gt; that it's a very simple ranking.&lt;/p&gt;
&lt;p&gt;What do I mean by linear? Well it's simple: I came up with some 7 reasons why I do around 20 things I do. Out of these 7, 4 were linear compositions of the other 3. Out of the remaining 3, I could pinpoint some combination of 3 basic emotions. Then I stopped, because, as I said, there isn't much further to go from there, and the mathy part of me realized I'd found what amounted to the rank of my emotional matrix, so I probably wouldn't make further headway anyway.&lt;/p&gt;
&lt;p&gt;But then I ran into an issue: &lt;em&gt;what should I do with this information?&lt;/em&gt; I had no idea how to combine some vague sense of self-realization with a desire to write, a personal website, and so much unused creative energy. I thought long and hard on the issue, deliberated for hours, and...&lt;/p&gt;
&lt;p&gt;Just kidding. The moment I stopped writing out the list, I started thinking through the blog entries. This will be the first of three (if I'm lucky), and simultaneously the most and least upbeat. So here we go.&lt;/p&gt;
&lt;h2&gt;Pride&lt;/h2&gt;
&lt;p&gt;Pride gets a bad rap. It's one of the deadly sins. It's associated with conceit, vanity, and self-interest. If you believe Quentin Tarantino, "Pride only hurts. It never helps."&lt;/p&gt;
&lt;p&gt;It also makes it possible to define yourself.&lt;/p&gt;
&lt;p&gt;Let me explain with an anecdote of sorts. Back in high school, I used to get around mostly by bike. (I still do, but I used to too.) By Grade 12, I had my route down perfectly: down along the lakeshore for about 7 km, then up one of the steepest hills in the city, then around 2 km more to my school's front entrance. It was a great path, stayed off the road for as long as possible, and had huge benefits for strength and cardio built right in.&lt;/p&gt;
&lt;p&gt;The waterfront was the hardest part. Large bodies of water tend to generate large air currents from convection, which means shorelines tend to be windy. Add in the fact that Lake Ontario is by no means small, and you get one hell of a windy bike ride. Most curiously, no matter what time I left and in which direction I was headed, the wind usually seemed to be &lt;em&gt;against me&lt;/em&gt;. So what did I do? Simple. I biked &lt;em&gt;harder&lt;/em&gt;. It became so frequent that every time I felt a blast of wind along Lakeshore Boulevard West, I muttered under my breath:&lt;/p&gt;
&lt;p&gt;Bring it on, motherfucker.&lt;/p&gt;
&lt;p&gt;See, biking is something that I'd used to &lt;em&gt;define&lt;/em&gt; me. If I knew more philosophy, I'd say I considered biking to be &lt;em&gt;essential&lt;/em&gt; to my person. I claimed that route and made it mine. No one did it better. And no wind got in my way. Not backing down became vital to who I was, integrated firmly with my identity.&lt;/p&gt;
&lt;p&gt;That's the kind of pride I mean. Not the harmful, get-in-your-way kind, but the kind that turns a simple activity like biking a short distance as fast as possible into a defense of your sense of self. The kind of feeling you get that makes you think, "I can't fail at this because it is not in my nature. &lt;em&gt;That is not who I am&lt;/em&gt;."&lt;/p&gt;
&lt;p&gt;You may still notice a problem.&lt;/p&gt;
&lt;p&gt;This kind of pride can screw you over if you do end up failing at something you treasure. Suddenly, you're without part of your identity, and you don't know how to fix that. I'm going to go ahead and push my anecdote as far as I can to give you some tips on that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pick your battles. I cannot stress this enough. Sure, biking into the wind made me feel validated because I could do it. But as it got colder? As the wind became less of a gentle, competitive shove and more of a threat on my life? As the streets iced up and the mornings grew dark? I stopped. I put my bike in the shed (&lt;em&gt;cough&lt;/em&gt; hallway &lt;em&gt;coug&lt;/em&gt;) for the winter and went into my yearly trading-coffee-for-morning-rides phase. I knew I couldn't win against the elements, and, besides, I biked first and foremost because it made me feel &lt;em&gt;alive&lt;/em&gt;. Dying in the process wouldn't help anything.&lt;/li&gt;
&lt;li&gt;Remind yourself periodically who's in charge. I have some rules about biking, like I try not to bike in the rain, and I avoid biking when I know I'll be out long after dark. Really, though, I just take a break from it every once in a while to remind me that I &lt;em&gt;chose&lt;/em&gt; to make it part of me, not the other way around. Remember, above all else, &lt;em&gt;you define you&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To sum up, let it drive you but keep your foot above the brake and your hands over the steering wheel (like you would with a self-driving car). And when you feel that gust pushing at you the exact moment you were starting to tire, lower your head, grin, and say:&lt;/p&gt;
&lt;p&gt;Bring it on, motherfucker.&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;</summary><category term="mental health"></category><category term="heavy"></category></entry><entry><title>Java - the Barbed-Wire Fence of Programming</title><link href="http://jabrahams.ca/java.html" rel="alternate"></link><updated>2014-03-08T19:00:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-03-08:java.html</id><summary type="html">&lt;p&gt;Occasionally, I like to take a step back and look at the programming languages I've used over the years. What better place to start than with my first, my last, my everything?&lt;/p&gt;
&lt;p&gt;I've been programming Java since high school, and it was the first real language I was exposed to. I suspect that, when I sleep, I still type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;because it's &lt;em&gt;that&lt;/em&gt; ingrained in my muscle memory. And you know what?&lt;/p&gt;
&lt;p&gt;Java is an &lt;em&gt;awful&lt;/em&gt; choice for a first language.&lt;/p&gt;
&lt;p&gt;I'm not going to just state that, I'll give reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java &lt;em&gt;requires&lt;/em&gt; Object-Oriented Programming. Every java program is a function embedded in an object. Way to keep a gentle learning curve, there.&lt;/li&gt;
&lt;li&gt;Java relies extensively on imports from other libraries, and other classes and types. That's so much to explain to a beginning programmer. Or not, which was the case with me: just don't explain anything, and just use it.&lt;/li&gt;
&lt;li&gt;Java forces exception handling. Never mind that you're just starting out and probably don't even know what an exception is.&lt;/li&gt;
&lt;li&gt;Java is garbage-collected, which means that you don't even know where things are going. &lt;code&gt;new&lt;/code&gt; is just a keyword that makes things happen to you.&lt;/li&gt;
&lt;li&gt;Java tends to use verbosity to the extreme: it makes simple tasks tedious, and complex tasks impossible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probably think with Point 4 up there that I advocate C or C++ instead, right? Well, yes and no. I think that those languages are great for teaching a fledgling programmer that the program you write can do horrible, terrifying things if you fuck up, which can be great for traumatizing a freshman programmer into getting his/her shit together, or it can mess up their mind really badly. I also think that languages like Python are too high-level to make certain the programmer knows exactly what they're doing, relying on language constructs more than common sense. So, I'd actually like to see someone teach using C and Python &lt;em&gt;in combination&lt;/em&gt;. (Though not in CPython, because that's really just the worst of both worlds.)&lt;/p&gt;
&lt;p&gt;Anyway, this article isn't about ripping on Java as a choice of teaching language. It's about ripping on Java's design choices. Full disclosure from this point on: I actually write Java full-time, so I'm going to avoid writing my way out of a job.&lt;/p&gt;
&lt;p&gt;Let's get down to it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verbosity. Oh my &lt;em&gt;God&lt;/em&gt; the verbosity. My fingers sometimes hurt after typing Java more than they'd hurt after an essay or a particularly long-winded blog post.&lt;/li&gt;
&lt;li&gt;Strictness in file organization. A file named [Foo].java can only have one public class named [Foo]. If it's in a packaged called com.abba.jesus.pidgeot, then it's file path has to be &lt;code&gt;[something]/com/abba/jesus/pidgeot/Foo.java&lt;/code&gt;, even if there's nothing in packages com, com.abba, or com.jesus.&lt;/li&gt;
&lt;li&gt;Weird type-boxing/casting rules. Each of the value types is implicitly convertible to a related class in &lt;code&gt;java.util&lt;/code&gt; (ie. &lt;code&gt;int&lt;/code&gt; =&amp;gt; &lt;code&gt;java.util.Integer&lt;/code&gt;)...except as an argument to a generic class, where it has to be declared as the class rather than the value-type (ie. &lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt; is a ParseException). This is fine (mostly), except that any function that takes a generic &lt;code&gt;T[]&lt;/code&gt; has to have a &lt;em&gt;separate implementation for each value type&lt;/em&gt;. Further, Java disallows casts between different class types (that aren't covariant)...except for a variable of &lt;em&gt;any&lt;/em&gt; type &lt;code&gt;v&lt;/code&gt;, &lt;code&gt;v + ""&lt;/code&gt; is &lt;em&gt;always&lt;/em&gt; a string and never results in a NullPointerException when &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The weirdness of exception handling. Prior to Java 7, there was no way to handle multiple exceptions in a single block, leaving copious room for typos in copy-pasting the same damn block to both related handlers. Oh, and you have to handle every Exception, regardless of if it makes sense to...unless it's a RuntimeException. Then the JVM gives it a free pass. Why even &lt;em&gt;have&lt;/em&gt; a duality? Why not just have stuff like that be handled as Errors or something?&lt;/li&gt;
&lt;li&gt;Weirdly inconsistent library support. See &lt;a href="http://tech.puredanger.com/2010/03/31/do-we-want-a-java-util-pair/"&gt;this article&lt;/a&gt; on the concept of a Pair class, for instance. They basically say, "Oh I don't think it's necessary, so no one else will." I've also heard people say, "Programmers will use it wrong." That is a &lt;em&gt;terrible&lt;/em&gt; reason not to support something, especially in a util class of all things. On that note...&lt;/li&gt;
&lt;li&gt;Complete lack of operator overloading. Which would you rather see:
    &lt;pre&gt;
    BigInteger a = new BigInteger("12343212");
    BigInteger b = new BigInteger("234231999");
    BigInteger c = new BigInteger("65565790099");
    return c.add(b.muliply(a));
    &lt;/pre&gt;
    or
    &lt;pre&gt;
    return c + (b * a);
    &lt;/pre&gt;
    Again, the response seems to be, "People will use it wrong." And a lot of the time, the hatred is directed at C++, specifically the stream operator:
    &lt;pre&gt;
    int i;
    cin &amp;gt;&amp;gt; i;
    cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;
    &lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To compare, let's discuss Scala, a language built on top of the JVM. Let's see what it does differently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verbosity. Scala tends towards the succinct whenever possible, at least in my experience.&lt;/li&gt;
&lt;li&gt;More free-form package organization. Scala will find your files, don't worry about what you name them. You can also put more than one top-level public class in a single file (though this is still discouraged)&lt;/li&gt;
&lt;li&gt;More intuitive type-coercion. Scala's type system is complex. I don't know enough about lambda calculus to pretend I fully understand every part of it, but I do know they make value types &lt;em&gt;effectively just a different part of the standard hierarchy&lt;/em&gt;. &lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt; isn't a syntax problem anymore: it just works.&lt;/li&gt;
&lt;li&gt;Free-form casting and conversions. Want &lt;code&gt;A&lt;/code&gt; to always make sense as a &lt;code&gt;B&lt;/code&gt;? Why not! You can do that.&lt;/li&gt;
&lt;li&gt;No exceptions are forced to be checked anymore. Rejoice!&lt;/li&gt;
&lt;li&gt;On the library support, it just tries to have as wide support as possible, which isn't always a good thing. (Want to know all of Scala? Too bad, that's what the internet's for.)&lt;/li&gt;
&lt;li&gt;Operator overloading is just another function. This &lt;em&gt;maybe&lt;/em&gt; goes a bit too far, since you can make operators using basically any character. (The &lt;code&gt;/:&lt;/code&gt; operator for fold-left is my favourite.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, while we're at it, let's look at C#, a language made because Microsoft didn't want to be sued for using Java at one point[citation needed]:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Still verbose, though I'd argue less so.&lt;/li&gt;
&lt;li&gt;Package organization? Totally up to you. Hey, have 5 classes per file if you want.&lt;/li&gt;
&lt;li&gt;A similar (though simpler) type system to Scala. Value types are &lt;code&gt;struct&lt;/code&gt;s, everything else is an &lt;code&gt;obejct&lt;/code&gt;, and &lt;code&gt;struct&lt;/code&gt;s can be semantically treated like &lt;code&gt;object&lt;/code&gt;s.&lt;/li&gt;
&lt;li&gt;Define your own cast operators! Make them as explicit as you want! &lt;/li&gt;
&lt;li&gt;Exceptions don't need to be checked. Funny how often this pops up...&lt;/li&gt;
&lt;li&gt;A decent-ish standard library which supports most of the things you'd want. Maps that &lt;em&gt;actually&lt;/em&gt; act the same as other iterables (as they damn-well should).&lt;/li&gt;
&lt;li&gt;Override &lt;em&gt;only the existing operators and only within the definition  of the class itself&lt;/em&gt; (ie, no overriding &lt;code&gt;int + int&lt;/code&gt; or something). Humourously, the bit shift operators (ie. the straming operators in C++) can only have the second operand be an &lt;code&gt;int&lt;/code&gt;, &lt;em&gt;because they're still pissed about that&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't take this to mean Java does everything wrong. The JVM is a great piece of technology, and the language has some neat constructs seen rarely elsewhere. (Anonymous interfaces, anyone?) But &lt;em&gt;so many&lt;/em&gt; of its design decisions serve merely to act out of spite to the admittedly-overindulgent amount of freedom that C++ gives programmers. And spite is a &lt;em&gt;terrible&lt;/em&gt; way to drive a design process. Scala, it seems, was designed out of counter-spite: it is &lt;em&gt;so&lt;/em&gt; different from Java, yet is based on the exact same technology stack. In my mind, &lt;em&gt;Scala is the biggest "Fuck You" to Java that exists&lt;/em&gt;. (C# only loses out on this because it's tied so tightly to Windows that it rarely sees the light of day outside of Microsoft developer pet-projects and ASP.NET-based websites.) And when a competitor springs up just to subvert everything you've done in an ironic way? Face it, Java, you've become the new C++. And not in a good way.&lt;/p&gt;
&lt;p&gt;So there's my Java rant. It's been a long time coming. I'll probably dissect Python at some point, so if that interests you, tune in again.
'Til then, I'll be waiting for my code to compile.&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;</summary><category term="tech"></category><category term="programming"></category><category term="nerdish"></category></entry><entry><title>When Failsafes Fail</title><link href="http://jabrahams.ca/failsafes.html" rel="alternate"></link><updated>2014-03-08T00:00:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-03-08:failsafes.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Disclaimer: this post is heavily personal, and not exactly cheery. It's also probably the most honest thing I will ever post on this blog, and easily the least emotionally-restrained. It has a lot of not-well-known info about me and my life that I've never been comfortable sharing. Depending on who you are and how well you know me, it may change the tenor of our interaction, and not necessarily for the better. Stop here if you aren't okay with that, or think I wouldn't be.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Still reading? Alright, you've been warned.&lt;/p&gt;
&lt;p&gt;This post is about the effects and truths of depression and related mental illnesses, from a first- and second-hand perspective. I'll start by going over why I have whatever knowledge I do, since otherwise I'd just be talking out my ass. Then I'll go over the most important things to remember about this kind of stuff, basically a fact-or-myth about dealing with depression. I'll finish up with some opinions about more general handling of mental health issues, because what's a blog without opinion?&lt;/p&gt;
&lt;h2&gt;Background Info&lt;/h2&gt;
&lt;p&gt;I've never told this to anyone without a medical degree, but in March 2012 I was diagnosed with mild-to-moderate depression. Though this was aggravated by a borderline case of anaemia, there's some evidence to suggest I've been dealing with depression since I was a pre-teen, most notably some hereditary predisposition and, oh yeah, &lt;em&gt;the fact that I'm still suffering from it&lt;/em&gt;. Mild-to-moderate depression is basically what we'd call "high-functioning" if I were an alcoholic: it doesn't strongly affect how I go about my day-to-day life (&lt;em&gt;usually&lt;/em&gt;), but it can still lead to significant problems down the road. What it basically boils down to is&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;little or no motivation to do pretty much anything&lt;/li&gt;
&lt;li&gt;extremely low social energy at times&lt;/li&gt;
&lt;li&gt;tendency towards self-defeating thought processes&lt;/li&gt;
&lt;li&gt;a few other things I won't discuss here because my blog is public&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I don't want to even fathom the number of people who read that section and went, "&lt;em&gt;Oh.&lt;/em&gt; That explains a lot.")&lt;/p&gt;
&lt;p&gt;Why did I never tell anyone? Well, &lt;em&gt;have you met me&lt;/em&gt;? Do I seem like the type to ask outside myself for help? Do I seem like the type to &lt;em&gt;stop and admit that something is wrong&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;I guess I'm doing my best to change that, now. (This post might not stay up forever.)&lt;/p&gt;
&lt;p&gt;"But Jacob," you might say if you skipped the rest of this section, "you talk about severe depression later on. Surely you can't be as informed about that."&lt;/p&gt;
&lt;!-- Get this section approved --&gt;

&lt;p&gt;I'd respond with this ever-so-slightly more public information. In October 2010, I started dating a wonderful woman named Monica Post. This was somewhat against my better judgement because, while I was almost certain that I was madly in love with her, I was more certain that she was severely depressed, because I'd been one of the people to help her out of a particularly low point. Later we found out that she had Bipolar Disorder, an illness that is characterized by unpredictable shifts between periods of mania (over-confidence, delusions of grandeur, hyperactivity, hallucinations, psychosis, and general emotional instability) and periods of depression (which I described above, except stronger). In a move seen by those who knew as uncharacteristically mature and brave (I don't share this belief), I stayed by her for a little over three years, through the best times and the worst.&lt;/p&gt;
&lt;p&gt;I really wish I didn't have to write in past tense. Monica died just under 4 months ago.&lt;/p&gt;
&lt;p&gt;Aside:I've never openly written on this subject without some level of control over my audience. My level of "handling it" fluctuates from day to day. On the better days, I want the subject as far away from me as possible. On the worse ones, I'm not strong enough to write about it. This blog post is partially me saying, "Fuck that. I'm stronger than this." (Before you agree with me, keep in mind that I had to write this section in private because I'm shaking like a poorly-built house on a fault line.)&lt;/p&gt;
&lt;p&gt;So uh yeah. Life experience is a bitch.&lt;/p&gt;
&lt;h2&gt;Facts&lt;/h2&gt;
&lt;p&gt;(Or as close to facts as I can get)&lt;/p&gt;
&lt;p&gt;First and foremost, something I feel should always be mentioned: depression is mostly about chemical imbalances in the brain. If there's anything that bugs knowledgeable people the most, it's when people say to just "Get over it." Seriously, fuck you. That's like telling a person in a wheelchair to just get up and walk.&lt;/p&gt;
&lt;p&gt;Now let's go over some treatment methods. The "simplest" treatment is psychotherapy, or, if you're in a lazy work of fiction, "lie down on a couch with a guy who looks like Freud and talk about your mother." The current main school of thought is &lt;a href="http://en.wikipedia.org/wiki/Cognitive_behavioral_therapy"&gt;Cognitive Behavioural Therapy&lt;/a&gt;, which focuses on harmful thought processes and destructive emotional responses. I say "main", but from what I've experienced I could also easily say "only," because I've never seen any other kind of psychotherapy suggested. In programming terms, CBT (as it's almost always abbreviated) is debugging your mind: constantly thinking, "Why did I think that? Where did that emotional outburst come from? Why am I so affected by this?" Luckily, most people are better at this than &lt;code&gt;gdb&lt;/code&gt;, since it's been shown to be fairly effective on anything short of severe depression (not to mention many other kinds of mental illness.) Hell, I'd say depression-free people can even benefit from it from time to time.&lt;/p&gt;
&lt;p&gt;But sometimes it just doesn't work. You'd be surprised at how self-defeating a person with depression can be, and sometimes it's just too deeply-rooted in their thought process to be dislodged like that. Or it just takes too much energy, and depression takes enough away on its own. For that, medication is the next best thing. &lt;/p&gt;
&lt;p&gt;Remember how I said depression is mainly chemicals? See, brains are &lt;em&gt;hard&lt;/em&gt;. There's so much that can go wrong, and, even when it looks like the same thing is wrong in two people, they may not be helped by the same thing. Again, in CS-y terms, it's like supporting an Android app on every phone: there are so many subtle differences in hardware and the implementation of software that a bugfix on one platform is nowhere near guaranteed to work on all others. Hell, it might make things &lt;em&gt;worse&lt;/em&gt;. That's why there are so many anti-depressants out there, and that's why some people spend their entire life finding the right one. (Ignore the implications of the wording. That's not what I meant.) Prozac might work for you, or it might make you more suicidal. Effexor might make you a little brighter, or it might numb your emotions. Cymbalta might make you more stable or (also likely) less. But, of course, SSRIs don't work that fast, so you won't know until 4 weeks in, and by then you'll be experiencing all the &lt;em&gt;negative&lt;/em&gt; side-effects, and you'll probably go through withdrawal if it turns out it wasn't even working. Then you just repeat the process the next time you can see your psychiatrist, because, wow, it looks like they're booked &lt;em&gt;through until December&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sorry, that's a bit of a raw nerve. Back on topic...&lt;/p&gt;
&lt;p&gt;There are more extreme cures and fixes than medication and thought-correction, but I won't go into them here because I &lt;em&gt;won't&lt;/em&gt; be able to write about them while staying in a stable frame of mind. There are also less-extreme things that help. A huge factor, for instance, is proper physical health. I've noticed personally that it's easier to handle my symptoms when I've been keeping up a healthy routine of diet and exercise (though maintaining that through an episode isn't easy, to say the least). Obviously this isn't a cure, since the episodes still happen, but it has been shown to improve the stress reaction, which I think is the most important factor in getting through it. (&lt;a href="http://www.webmd.com/depression/guide/exercise-depression"&gt;Source&lt;/a&gt;) To put this in nerd-terms, this goes about as far towards computer performance as keeping your fan free of dust: it won't fix a crashed hard-drive, but it'll help out at times.&lt;/p&gt;
&lt;h2&gt;Opinion&lt;/h2&gt;
&lt;p&gt;Where to begin?&lt;/p&gt;
&lt;p&gt;Let's start off at the obvious: please treat people with depression (and any other mental illness) as &lt;em&gt;people&lt;/em&gt;. Like, they aren't animals in a zoo or something, nor are they that mask of tragedy that hangs along its creepy-smile companion over every middle school drama department. They have just as much depth to their emotional state as any other person, and they &lt;em&gt;really&lt;/em&gt; don't like to be labelled. I know the party-line is always about "removing stigma," but I feel like a lot of people who talk like that do very little to actually &lt;em&gt;remove&lt;/em&gt; it, and in some ways actually &lt;em&gt;further&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;On that note, the idea of a "mental health rally?" Stop. The last thing a depressed person wants is to be reminded of it in public. Further, you're making a social event &lt;em&gt;for people with no energy for social activity&lt;/em&gt;. How does that make sense? Making people aware of resources available to them is one thing. Pointing out what's &lt;em&gt;wrong&lt;/em&gt; in a public setting is another.&lt;/p&gt;
&lt;p&gt;If you're having trouble, &lt;em&gt;see a therapist at least once&lt;/em&gt;. I'm not saying to sign up for 10 sessions, just see if it helps and go from there. If you want a resource on CBT for some self-study, I found &lt;a href="http://www.amazon.com/Mind-Over-Mood-Change-Changing/dp/0898621283"&gt;Mind over Mood&lt;/a&gt; to be pretty helpful. &lt;/p&gt;
&lt;p&gt;Lastly, don't suffer in silence. Don't wait 10 years to tell your family you think something is wrong. Maybe don't blog about it, but talking to someone, &lt;em&gt;anyone&lt;/em&gt;, will help, trust me. I'm probably pushing the blog-barrier again, but that's one of the things I miss most, which is likely why I'm writing about it now, as opposed to months ago.&lt;/p&gt;
&lt;p&gt;Happy 3rd post! I'm going to go sit in my room for a while.&lt;/p&gt;
&lt;p&gt;Later,&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;</summary><category term="personal"></category><category term="mental health"></category><category term="heavy"></category></entry><entry><title>Pelican, or, How I came to despise Ruby</title><link href="http://jabrahams.ca/pelican.html" rel="alternate"></link><updated>2014-03-02T09:15:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-03-02:pelican.html</id><summary type="html">&lt;p&gt;This blog has been in the works for...well...a while now.&lt;/p&gt;
&lt;p&gt;Maybe a year, give or take.&lt;/p&gt;
&lt;p&gt;I bought the domain name back in October in the hopes of having something to show off to interviewers. When it came down to actually making the site, I ran into some issues.&lt;/p&gt;
&lt;p&gt;Namely, I had no idea how to do that.&lt;/p&gt;
&lt;p&gt;To give myself some credit, I did know a thing or two of HTML, CSS, Javascript, jQuery, and nodejs (which is what I was initially using to serve pages, from within a heroku app). But I didn't know good design practices for web (how do i shot CSS), had a lot of out-of-date information (I blame learning HTML back at 1.0), and was too cocky to just delegate all the hard decisions to an existing framework.&lt;/p&gt;
&lt;p&gt;I chose to fix the last one.&lt;/p&gt;
&lt;p&gt;The result was a broken mess that I couldn't bear to link to on my resume out of shame (but will link to &lt;a href="http://jabrahams-1.herokuapp.com"&gt;here&lt;/a&gt; out of shamelessness). So yesterday, I sat down and made some changes, because I felt work-sick and knew the only way to remedy that was to stare at text files for hours on end. I made a &lt;a href="http://github.com/JacobLuke/jacobluke.github.io"&gt;github.io repository&lt;/a&gt; and picked a framework: Octopress. It came well-recommended by various acquaintances, it had a neat aesthetic, and the deploy process looked pretty straightforward.&lt;/p&gt;
&lt;p&gt;That mistake cost me 4 hours.&lt;/p&gt;
&lt;p&gt;Let me elaborate a little. I run Windows, partially because I have been for years, partially because I like being able to game, and mostly because of inertia. (I've run Mint and Ubuntu in the past and will probably reinstall one of them at one point.) Octopress is built in Ruby. If there's one programming language community that utterly despises Windows users, it's...well, it's Objective-C, but Ruby's a close second. Basically every step of the build process had to be finagled into working. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ruby 2.0.0 doesn't work? Ruby 1.9.3 gets you one step further before breaking.&lt;/li&gt;
&lt;li&gt;Ruby just won't build? Need the not-optional-but-also-not-pre-bundled devkit.&lt;/li&gt;
&lt;li&gt;Gems won't install? Oh, by default they're sent as &lt;em&gt;binaries&lt;/em&gt;, which are obviously not going to work on a completely different operating system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before I even found the answer to that third one, I was already looking for alternatives. Github pages (like this one) ship with Jekyll by default, but that was apparently just a less-well-loved Octopress. Plus it was still in Ruby. I considered not using a publishing platform, just injecting Bootstrap into the page to make it a little prettier, but decided that I'd rather do something a little more. I even considered writing my own publishing platform, but realized that was way beyond my effort-threshold for this blog. And then I found Pelican.&lt;/p&gt;
&lt;p&gt;Pelican is a blogging framework written in Python. This had a ton of advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I know that Python at least runs on Windows, since it's what I do most of my non-work day-to-day coding in&lt;/li&gt;
&lt;li&gt;Python projects typically have at least half-decent support for people chained to Microsoft. I actually find it's often better than their Mac support.&lt;/li&gt;
&lt;li&gt;I know enough of the language to debug things when stuff goes wrong, or potentially extend/contribute the project in some way.&lt;/li&gt;
&lt;li&gt;Usually the python community is nice people. Usually.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I uninstalled Ruby (both versions that had made their way to my machine), deleted all the random repositories I'd checked out trying to make it work, reset all the settings that the installers had broken, and checked out Pelican. Or tried to, realized that my &lt;code&gt;PATH&lt;/code&gt; environment variable was missing most of the subdirectories of my Python installation, fixed that, and got everything working-enough to actually publish an article. And, after some early-morning wrangling with my Host configurations, this blog was born.&lt;/p&gt;
&lt;p&gt;To sum up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't use Windows&lt;/li&gt;
&lt;li&gt;If you absolutely must use Windows, don't use Ruby. Use Python.&lt;/li&gt;
&lt;li&gt;When in doubt, add more stuff to &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now excuse me while I hunt down a configuration setting.&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;</summary><category term="tech"></category><category term="nerdish stuff"></category><category term="programming"></category><category term="metablogging"></category></entry><entry><title>A blog</title><link href="http://jabrahams.ca/a-blog.html" rel="alternate"></link><updated>2014-03-02T01:02:00Z</updated><author><name>Jacob Abrahams</name></author><id>tag:jabrahams.ca,2014-03-02:a-blog.html</id><summary type="html">&lt;p&gt;Well now.&lt;/p&gt;
&lt;p&gt;I'd be lying if I said I haven't tried my hand at this before, but I'm giving it another shot. Plus, it's tied to my professional identity this time, which is kind of like holding my own career hostage.&lt;/p&gt;
&lt;p&gt;Hi. I'm Jacob. Nice to meet you.&lt;/p&gt;
&lt;p&gt;I do a bunch of things. I go to school at the University of Waterloo (in the frozen North). I intern at companies from time to time. (My &lt;a href="http://linkedin.com/in/jlabrahams"&gt;LinkedIn profile&lt;/a&gt; is a good source of truth on what I'm up to in that regard.) I write software from time to time, mostly simple I-wonder-how-fast-I-can-whip-this-up-in-Python things. I read books and listen to music, and when asked can never describe my taste in either, but usually have a point of view on whatever. I play some music too, mostly classical piano. I play video games, though it's kind of like my book-tastes: I never really know which ones. I bike places when my bike isn't broken, which is rare. I like good beer (lager in warm weather, amber ales in the winter), good wine (mostly Riesling and Chardonnay), and good company.&lt;/p&gt;
&lt;p&gt;I don't know what I want this blog to be yet. I have some programming-related rants that have been kicking around in my head for a while, and some short-story ideas I'd want to flesh out a little more. I try to stay away from politics, but who knows? If you're still reading at this point, chances are better-than-even that you know I haven't exactly had the best run of luck the past couple of months, and I'm on the fence about just how much of that I want to get off my chest in such a public and tied-to-me way. Or I might just talk about things I don't know anything about. Yeah, probably that one.&lt;/p&gt;
&lt;p&gt;So there it is. Basically who I am in two paragraphs. If my writing style hasn't driven you away yet, it probably won't. So sit and stay awhile.&lt;/p&gt;
&lt;p&gt;I'm sure it'll be worth it.&lt;/p&gt;
&lt;p&gt;J&lt;/p&gt;</summary><category term="metablogging"></category></entry></feed>